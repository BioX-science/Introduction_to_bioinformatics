---
title: "Session #3 - Exercises"
author: "Adrian C Lo"
date: "04/03/2020"
output: 
  pdf_document: default
---

# INSTRUCTIONS

There are different segment with emphasis on data manipulation and visualization, each covering questions that increase in difficulty. Fill in the answer within the code chunk. When you wish to test the code chunk, press the *green play button* on the right side of the code chunk to see your output. 

Cheatsheets are provided where you can find clues for solving the questions. In more difficult cases, actual hints will be given as to which functions are required. You can access further information with *?x* where x is the function name, e.g. ?print().

Also check [this page](https://juba.github.io/tidyverse/10-dplyr.html), specifically sections 8.3 and 10.2 for additional help.

We encourage to write code in the spirit of tidyverse, which improves readability. For instance, compare the two codes below that filter the mtcars dataset for automatic cars, then categorizes them per cyl capaticy, and compute the average horse power.

```{r, results = F}

suppressPackageStartupMessages( library(dplyr) )

# base code
summarise(group_by(filter(mtcars, am == 1), cyl), hp = mean(hp))

# tidyverse code
mtcars %>% 
  filter(am == 1) %>% 
  group_by(cyl) %>% 
  summarise(hp = mean(hp))
```

The main dataset that we will be exploring the coronavirus dataset, which comes from the like-named {coronavirus} library. To showcase that ggplot2 can also be used to visualize data on the world map. For this, let us walk through this example.

# EXAMPLE: coronavirus over the world during the last 24 hours

First, we install/upload the necessary packages. The {coronavirus} package provides an up-to-date dataset of confirmed, recovered and dead cases of coronavirus.

```{r}

devtools::install_github("RamiKrispin/coronavirus")
suppressPackageStartupMessages( library(coronavirus) )
suppressPackageStartupMessages( library(tidyverse) )
suppressPackageStartupMessages( library(viridis) ) # install.packages("viridis")

```

We load in the data. And make some minor adjustments, for consistency with other packages.

```{r}
coronavirus

coronavirus <- coronavirus %>% 
  mutate(Country.Region = case_when(
    Country.Region == "US" ~ "USA",
    Country.Region %in% c("Mainland China","Macau","Hong Kong") ~ "China",
    Country.Region == "North Macedonia" ~ "Macedonia",
    TRUE ~ as.character(Country.Region)
  ))

max(coronavirus$date) # check whether the dataset is up to date (i.e. yesterday)
```

With {ggplot2}, we can construct the world map. This map is constructed through a dataset "world" that contains all the longitudes and latitudes of all the country boundaries. In the code below we construct an ordinary world map. 

```{r}

suppressPackageStartupMessages( library(maps) )
suppressPackageStartupMessages( library(ggplot2) )

world_map <- map_data("world")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
  geom_polygon(fill = "lightgray", color = "white")

```

This world map can now  be filled with more statistical information. Let's augment it with information on the number of confirmed cases yesterday. 

```{r}

yesterday <- coronavirus %>% 
  filter(date == max(date)) %>% # get only data from yesterday
  filter(type == "confirmed") %>% # only confirmed cases
  select(Country.Region, cases) %>%
  group_by(Country.Region) %>%
  summarise(confirmed_cases = sum(cases)) %>%
  arrange(desc(confirmed_cases))

merged_map <- left_join(world_map, yesterday, by = c("region" = "Country.Region"))

ggplot(merged_map, aes(long, lat, group = group)) + 
  geom_polygon(aes(fill = confirmed_cases), color = "white") +
  scale_fill_viridis(option = "magma")

```

The world map now shows the new confirmed cases from only yesterday. Fascinating, right? Now it is your turn, to explore this (and other) datasets with {dplyr} and {ggplot2}!

# EXERCISES
# data manipulations \{dplyr\}

```{r}

suppressPackageStartupMessages( library(dplyr) )
suppressPackageStartupMessages( library(tidyr) )
suppressPackageStartupMessages( library(lubridate) )

```

### In the following questions, you will perform exploratory analysis on the coronavirus. This dataset is contained in the like-named {coronavirus} library.

```{r}

# devtools::install_github("RamiKrispin/coronavirus")
suppressPackageStartupMessages( library(coronavirus) )

```

1. Worldwide, how many confirmed cases of coronavirus have been found?

```{r}

#

```

2. Worldwide, how many people died from coronavirus?

```{r}

#

```

3. Which are the top 5 countries with the most cases of confirmed coronavirus?

```{r}

#

```

4. From which country is the last confirmed case?

```{r}

#

```

5. From which country were the latest recovered cases?

```{r}

#

```

6. When and where were the most confirmed cases detected on a single day?

```{r}

#

```

7. Were there any false positive confirmed cases?

```{r}

#

```

8. Which are the top 3 countries that have more than 20 deaths?

```{r}

#

```

9. How many countries have a recovered-confirmed ratio of more than 0.60?

```{r}

#

```

10. What is the recovery-confirmed ratio for Italy?

```{r}

#
    
```

11. How many confirmed, recovered and dead cases were there in only the month February?

```{r}

#

```

### In the following questions, you will explore the popularity of certain babynames. This dataset can be found in the like-named {babynames} library.

```{r}

suppressPackageStartupMessages( library(babynames) )

```

1. What is the proportion of female babies that are called "Anna" in 1880 and 2017?

```{r}

#

```

2. From 1880-1900, which was the most popular name for boys and girls?

```{r}

#

```

3. From 1880-1900, which was the least popular name for boys and girls?

```{r}

#

```

4. From 2000-2017, which was the most popular name for boys and girls?

```{r}

#

```

5. From 2000-2017, which was the least popular name for boys and girls?

```{r}

#

```

6. For girls, what were the most popular name in 1880, 1917, 1943 and 2017?

```{r}

#

```

7. How many different boy names were there between 1880-1900?

```{r}

#

```

8. How many different boy names were there between 2000-2017? Did we diversify compared to the previous era?

```{r}

#

```

9. What is the popularity of your own name in 2017?

```{r}

#

```

### In the following questions, you will perform exploratory analysis on the flight schedule of airplanes arriving and departing from NYC in 2013. This dataset (flights) is contained in the {nycflights13} library.

```{r}

suppressPackageStartupMessages( library(nycflights13) )

```

1. How many flights have an arrival delay of more than 2 hours? HINT: **tally()**

```{r}

#

```

2. How many flights flew to Houston (IAH or HOU)?

```{r}

#

```

3. How many flights were operated by UA, AA and DL separately?

```{r}

#

```

4. How many flights departed in the months July, August and September separately?

```{r}

#

```

5. How many flights arrived with more than 2 hours delay, but left on time?

```{r}

#

```

6. How many flights departed between midnight and 6 am (inclusive)?

```{r}

#

```

7. How many flights have a missing dep_time? What other variables are missing? What might these rows represent?

```{r}

#

```

8. Sort flights to find the most delayed departure flights. 

```{r}

#

```

9. Find the flights that flew the longest distance.

```{r}

#

```

10. Select from flights the following columns: dep_time, dep_delay, arr_time, arr_delay

```{r}

#

```

11. How many cancelled flights are there per month day?

```{r}

#
```

12. Which carrier has the most cancelled flights?

```{r}

#

```

# data visualizations \{ggplot2\}

```{r}

suppressPackageStartupMessages( library(ggplot2) )
suppressPackageStartupMessages( library(forcats) )

```

### In the following questions, you will perform exploratory analysis on the coronavirus. This dataset is contained in the like-named {coronavirus} library.

1. Plot the confirmed coronavirus cases over time.

```{r}

#

```

2. Plot the confirmed cases over time, as well as recovered from and death by coronavirus in side-by-side plots

```{r}

#

```

3. Plot the cumulative frequency of confirmed cases in Italy. HINT: **cumsum()**

```{r}

#

```

4. Plot the cumulative frequency of confirmed cases in Italy as well as its neighbouring countries (France and Switzerland). Plot the progression in one plot, but with differently colored lines. HINT: **cumsum()**

```{r}

#

```

5. Selectively for Mainland China, which province has shown the most confirmed cases? Plot with bars, and sorted in decreasing severity. HINT: **fct_reorder()** from the {forcats} library and **coord_flip()**

```{r}

#
  
```

6. In the coronavirus dataset, filter for recovered cases, and show per country the total amount of recovered cases. Plot with bars, and sorted in decreasing severity. Also, normalize the number of cases with log10 (to reduce the saturation from China).

```{r}

#
  
```

7. Selectively for Mainland China, plot the cumulative frequency of confirmed cases, as well as recovered and dead cases. Place in one plot, but with differently colored lines.

```{r}

#

```

### In the following questions, you will visualize the popularity of certain babynames as well as the number of births. This dataset can be found in the like-named {babynames} library.

```{r}

suppressPackageStartupMessages( library(babynames) )

```

1. Plot the number of birth over time from the births dataset.

```{r}

#

```


2. Plot the development of the name "Tristan" over time for each sex from the babynames dataset.

```{r}

#

```

3. Plot the development of the name "Mary" and "Noah" over time for each sex. What can you say about the development of these names?

```{r}

#

```

4. Extract from the babynames dataset for each year, the number of unique names for boys and girls. Plot these over time side-by-side. What is the trend? Which sex has more diversified names? Any peculiar trends? 

```{r}

#

```

### In the following questions, you will visualize the economic parameteres from the gapminder dataset. This dataset can be found in the like-named {gapminder} library.

```{r}

suppressPackageStartupMessages( library(gapminder) )

```

1. Plot the life expectancy for each continent from the year 2002 as individual points

```{r}

#

```

2. Continue from the previous question: add some transparency in the dots and give each continent a different color.

```{r}

#

```

3. Continue from the previous question: add a boxplot to the graph. Add it in such a way that the individual points will still be visible.

```{r}

#

```

4. Continue from the previous question: Adjust the labels so they are more presentable. Change the title on the y-axis to "Life Expectancy", and the title on the x-axis to "Continent". Add a title "My colorful plot". Also add a caption with "made by {your name}". Finally, remove the legend title.

```{r}

#

```
